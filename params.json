{"name":"Teapot","tagline":"Simple PHP library to improve verbosity in HTTP response codes","body":"This is a _very_ simple library that aims to aid verbosity in any Web-based application by defining clearly the HTTP 1.1 response codes as constants. It includes two files: an interface, which contains the constants, and an exception specifically for HTTP.\r\n\r\n### Using the StatusCodes interface\r\n\r\nAssuming for a moment a PHPUnit test on a cURL client response:\r\n\r\n    <?php\r\n\r\n    /**\r\n     * @test\r\n     * @dataProvider someUrlProvider\r\n     **/\r\n    public function testResponseIsOK($url)\r\n    {\r\n        $client = new Client($url);\r\n        $response = $client->get();\r\n        $this->assertEquals(200, $response->getStatusCode());\r\n    }\r\n\r\nThis becomes:\r\n\r\n    <?php\r\n    use \\Teapot\\StatusCode;\r\n    ...\r\n    $this->assertEquals(StatusCode:OK, $response->getStatusCode());\r\n\r\nWhile this is a trivial example, the additional verbosity of the code is clearer with other HTTP status codes:\r\n\r\n    <?php\r\n    use \\Teapot\\StatusCode;\r\n\r\n    $this->assertEquals(StatusCode:NOT_FOUND, $response->getStatusCode());\r\n    $this->assertEquals(StatusCode:FORBIDDEN, $response->getStatusCode());\r\n    $this->assertEquals(StatusCode:MOVED_PERMANENTLY, $response->getStatusCode());\r\n    $this->assertEquals(StatusCode:CREATED, $response->getStatusCode());\r\n\r\nAs `StatusCode` is an interface without any methods, you can directly implement it if you prefer:\r\n\r\n    <?php\r\n\r\n    class FooController implements \\Teapot\\StatusCode\r\n    {\r\n\r\n        public function badAction()\r\n        {\r\n            if ($this->request->getMethod() == 'POST') {\r\n                throw new \\Exception('Bad!', self::METHOD_NOT_ALLOWED);\r\n            }\r\n        }\r\n    }\r\n\r\nThis may be beneficial in an abstract class, so that child classes don't need to explicitly use the interface.\r\n\r\nAll constants have doc blocks that use the official W3C descriptions of the status code, to aid IDEs and for reference.\r\n\r\n### Using the HttpException\r\n\r\nThe `HttpException` is very straightforward. It simply is a named exception to aid verbosity:\r\n\r\n\r\n    <?php\r\n\r\n    use \\Teapot\\HttpException;\r\n    use \\Teapot\\StatusCode;\r\n\r\n    throw new HttpException('Sorry this page does not exist!', StatusCode::NOT_FOUND);\r\n\r\nThe exception itself uses the `StatusCode` interface, allowing you to avoid manually and explicitly importing it if you prefer:\r\n\r\n    <?php\r\n\r\n    use \\Teapot\\HttpException;\r\n\r\n    throw new TeapotException('Sorry this page does not exist!', HttpException::NOT_FOUND);\r\n\r\n### Coding Standards\r\n\r\nThe entire library is intended to be [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md \"PSR-0\"), [PSR-1](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md \"PSR-1\") and [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md \"PSR-2\") compliant.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}